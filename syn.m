    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
    %     设置初始化信息  
    %  N：设置卡尔曼滤波器追踪点数  
    %  r：设置估计变量个数，这里r=2 即S、V
    %  s：从基站接收CCP时间戳  （输入量）
    %  v：时钟漂移率 （输出估计量）
    %  dt：主基站发送CCP的间隔 （输入量）
    %  wt: 系统噪声 
    % //没用  vt: 量测噪声，方差为3×10^(-20)   3*exp(-20)  
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
    clear all;  
    close all;  
    N = 128;  
    r = 2;  
    t = 1:1:N;  
    T = 1;  
    load('matlab.mat')
    load('matlab1.mat')
   
% 所有的观测值数据
%     s = zeros(1,N); %生成1行N列的零填充的矩阵  
%     v = zeros(1,N);  
%     s0 = 0;  
%     v0 = 1;  
%     for n = 1:N     
%         v(n) = v0 + a(n)*n;  
%         s(n) = 1000+v0*n+0.5*a(n)*n*n;  
%     end  

%     wt = randn(1,N);  %1行N列随机数填充的矩阵
%     wt = sqrt(4)*wt./std(wt);  
    %这里wt什么意思？
    %sqrt返回平方根
    %./点除 如果a、b是矩阵，a./b就是a、b中对应的每个元素相除，得到一个新的矩阵
    %返回标准差
%     s = s + wt;  
%     v = v + wt;  
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
    % 卡尔曼滤波部分，继承之前初始化变量  
    % A：转移矩阵  2*2维 （包含输入量dt）
    % H：量测矩阵  1*2维
    % Qk：系统噪声矩阵  2*2维
    % Rk：量测噪声矩阵  1*1维
    % P0：均方误差矩阵初始值  2*2维
    % Y：状态矩阵，由k_s，k_v,k_a组成  （两个输出估计量） 2*2维
    % Y0：状态矩阵的初始值  2*2维
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
    Y0 = [0 1]';  
    Y = [Y0 zeros(r,N-1)];  
    %A = [1 dt;0 1];  
    H = [1 0];  
    Qk = [0 0;0 5*exp(-20)];  
    Rk = 3*exp(-20);
    P0 = [0 0;0 0];  
    P1 = P0;  
    P2 = zeros(r,r);  
    for k = 2:N  
        A = [1 tx(1,k)-tx(1,k-1);0 1];
        Y(:,k) = A*Y(:,k);  
        P2 = A*P1*A'+Qk;  
        Kk = P2*H'*inv(H*P2*H'+Rk);  
        Y(:,k+1) = Y(:,k)+Kk*(s(:,k)-H*Y(:,k));  
        P1 = (eye(r,r)-Kk
%         format long 
        v(k) = (s(1,k)-s(1,k-1))/(tx(1,k)-tx(1,k-1)); %计算时钟漂移率
    end  
    v(1) = 1;
    k_s = Y(1,:);  
    k_v = Y(2,:); 
    
    subplot(3,1,1); 
    plot(t,s(t),'-',t,k_s(t),'o');  
    title('从基站接收CCP时间戳');  
    legend('实际值','估计值');  
    xlabel('迭代次数');  
    ylabel('从基站接收CCP时间戳');  
    
    subplot(3,1,2); 
    plot(t,s(t)-Y(1,t),'-');  
    title('实际值与估计值的差值');  
    %legend('实际值','估计值');  
    xlabel('迭代次数');  
    ylabel('实际值与估计值的差值');  
    axis([0,N,-100000000000,100000000000]);
    
    subplot(3,1,3);  
    plot(t,v(t),t,k_v(t),'+');  
    title('时钟漂移率');  
    legend('实际值','估计值');  
    xlabel('迭代次数');  
    ylabel('时钟漂移率');  

     
     %axis([0,N,-2,2]);  
     axis([0,N,0.999999,1.000002]); 